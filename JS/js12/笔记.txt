事件（语法：on + 事件类型）：用来DOM对节点操作做出响应
    网页事件
        document
        document.documentElement(html)
    event对象
        window.event    IE chrome
        参数方式传入    高级浏览器
        兼容： var oEvent = ev || window.event;

        事件源(返回的事件操作的对象)
            oEvent.target       高级浏览器
            oEvent.srcElement   非火狐
            兼容： var oTarget = oEvent.target || oEvent.srcElement;
        事件类型
            oEvent.type 返回事件类型

         发生事件鼠标在网页的坐标
            oEvent.clientX      离可视区域的左边距
            oEvent.clientY      离可视区域的上边距
            oEvent.pageX        离文档的左边距
            oEvent.pageY        离文档的上边距
            兼容函数
               function getPosition( event ){      //获取点击在文档的实际位置
                        if(event.pageX){
                            return { X: event.pageX, Y: event.pageY };      //高级浏览器
                        }else{
                            var scrollLeft = document.body.scrollLeft || document.documentElement.scrollLeft,       //返回滚动条的左边距
                                    scrollTop = document.body.scrollTop || document.documentElement.scrollTop;         //返回滚动条的上边距
                            return { X: event.clientX + scrollLeft, Y: event.clientY + scrollTop };
                        }
                    }

    窗口事件（document没有父节点，而是window的属性对象）
        滚动条事件
             window.onscroll    浏览器窗口的滚动条事件一定要加载到window上
        滚动条的边距
            document.body.scrollLeft                chrome
            document.documentElement.scrollLeft     IE FF
            兼容：
                 document.body.scrollLeft || document.documentElement.scrollLeft    滚动条的左边距
                 document.body.scrollTop || document.documentElement.scrollTop;     滚动条的上边距

        窗口尺寸事件
            window.onresize     当窗口大小发生改变时触发
            可视区域的宽高
                document.documentElement.clientWidth        可视区域的宽
                document.documentElement.clientHeight       可视区域的高
    事件流
        事件处理流程分为三个阶段：
        	1、事件捕获阶段，
        	2、事件目标阶段，
        	3、事件起泡阶段
        1、事件捕获：当某个元素触发某个事件（如onclick），顶层节点对象document就会发出一个事件流，随着DOM树的节点向目标元素节点流去，直到到达事件真正发生的目标元素。在这个过程中，事件处理函数是不会被触发的。
        2、事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。
        3、事件起泡：从目标元素开始，往顶层元素传播。途中如果有节点绑定了相应的同种事件处理函数，这些函数都会被依次触发。

        阻止事件冒泡
            oEvent.stopPropagation()    高级浏览器
            oEvent.cancelBubble = true  所有浏览器,但是不在JS的标准中
            兼容函数
                function stopBubble(oEvent){
                    oEvent.stopPropagation ? oEvent.stopPropagation() : oEvent.cancelBubble = true;
                }






